name: master

on: 
  push:
    branches:
      - master
    
env:
   APP_NAME: Iface.Oik.ScriptEngine

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
        
    - name: Build
      run: dotnet build -c Release
      
    - name: Test
      run: dotnet test

    - name: Prepare version number
      id: version
      run: echo "::set-output name=id::$(date +'%y').${{github.run_number}}"

    - name: Prepare release names
      id: release
      run: |
        echo "::set-output name=windows_release::${{env.APP_NAME}}.${{steps.version.outputs.id}}.zip"
        echo "::set-output name=linux_release::${{env.APP_NAME}}.${{steps.version.outputs.id}}.tar.gz"

    - name: Publish
      run: |
        dotnet publish -c Release -r win-x64 --self-contained false -o dist_windows/bin
        dotnet publish -c Release -r linux-x64 --self-contained false -o dist_linux/bin
      
    - name: Copy config samples
      run: | 
        cp -r sample_configs dist_windows/sample_configs
        cp -r sample_configs dist_linux/sample_configs
      
    - name: Create empty configs folder
      run: |
        mkdir dist_windows/configs
        mkdir dist_linux/configs
        
    - name: Make archives
      run: |
        7z a ${{steps.release.outputs.windows_release}} ./dist_windows/*
        tar -czf ${{steps.release.outputs.linux_release}} -C dist_linux .
      
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{steps.version.outputs.id}}
        release_name: ${{env.APP_NAME}} ${{steps.version.outputs.id}}
        
    - name: Upload Github Release (Windows)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} 
        asset_path: ./${{steps.release.outputs.windows_release}}
        asset_name: ${{steps.release.outputs.windows_release}}
        asset_content_type: application/zip

    - name: Upload Github Release (Linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{steps.release.outputs.linux_release}}
        asset_name: ${{steps.release.outputs.linux_release}}
        asset_content_type: application/gzip
